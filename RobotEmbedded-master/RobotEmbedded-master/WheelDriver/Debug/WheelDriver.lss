
WheelDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00000c7a  00000d0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800204  00800204  00000d12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ea7  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001275  00000000  00000000  00002dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fb6  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  00005fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014afc  00000000  00000000  000063f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001127  00000000  00000000  0001aeec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0001c013  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005464  00000000  00000000  0001c1db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	8f c0       	rjmp	.+286    	; 0x144 <__vector_9>
  26:	00 00       	nop
  28:	29 c2       	rjmp	.+1106   	; 0x47c <__vector_10>
  2a:	00 00       	nop
  2c:	80 c2       	rjmp	.+1280   	; 0x52e <__vector_11>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	04 c1       	rjmp	.+520    	; 0x24e <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	0f c1       	rjmp	.+542    	; 0x2a0 <__vector_32>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 32       	cpi	r26, 0x28	; 40
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	81 d3       	rcall	.+1794   	; 0x822 <main>
 120:	aa c5       	rjmp	.+2900   	; 0xc76 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <IRsetup>:

int leftTape, rightTape = 0; 

void IRsetup()
{
	DDRB |= 0x00;
 124:	84 b1       	in	r24, 0x04	; 4
 126:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x00;
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	85 b9       	out	0x05, r24	; 5
	
	
	PCICR |= 0x01;
 12c:	e8 e6       	ldi	r30, 0x68	; 104
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
	PCIFR |= 0x01;
 136:	d8 9a       	sbi	0x1b, 0	; 27
	PCMSK0 |= 0x03;
 138:	eb e6       	ldi	r30, 0x6B	; 107
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	83 60       	ori	r24, 0x03	; 3
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <__vector_9>:
}

ISR(PCINT0_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
	char curstate = PINB;
 152:	83 b1       	in	r24, 0x03	; 3
 154:	83 70       	andi	r24, 0x03	; 3
	if((curstate & 0x03) == 0x00)
 156:	49 f4       	brne	.+18     	; 0x16a <__vector_9+0x26>
	{
		leftTape = 0;
 158:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <leftTape+0x1>
 15c:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <leftTape>
		rightTape = 0;
 160:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__data_end+0x1>
 164:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
 168:	1a c0       	rjmp	.+52     	; 0x19e <__vector_9+0x5a>
	}
	if((curstate & 0x03) == 0x01)
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	59 f4       	brne	.+22     	; 0x184 <__vector_9+0x40>
	{
		leftTape = 0;
 16e:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <leftTape+0x1>
 172:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <leftTape>
		rightTape = 1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
 17e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
 182:	19 c0       	rjmp	.+50     	; 0x1b6 <__vector_9+0x72>
	}
	if((curstate & 0x03) == 0x02)
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	59 f4       	brne	.+22     	; 0x19e <__vector_9+0x5a>
	{
		leftTape = 1;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <leftTape+0x1>
 190:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <leftTape>
		rightTape = 0;
 194:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__data_end+0x1>
 198:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <__vector_9+0x72>
	}
	if((curstate & 0x03) == 0x03)
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	51 f4       	brne	.+20     	; 0x1b6 <__vector_9+0x72>
	{
		leftTape = 1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <leftTape+0x1>
 1aa:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <leftTape>
		rightTape = 1;
 1ae:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
 1b2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
	}
}
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <IRrun>:


void IRrun()
{
	if(leftTape==1 && rightTape==1)
 1c4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <leftTape>
 1c8:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <leftTape+0x1>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	91 05       	cpc	r25, r1
 1d0:	89 f4       	brne	.+34     	; 0x1f4 <IRrun+0x30>
 1d2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 1d6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	69 f4       	brne	.+26     	; 0x1f8 <IRrun+0x34>
	{
		stop();
 1de:	bd d0       	rcall	.+378    	; 0x35a <stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	83 ed       	ldi	r24, 0xD3	; 211
 1e4:	90 e3       	ldi	r25, 0x30	; 48
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <IRrun+0x22>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <IRrun+0x2c>
 1f0:	00 00       	nop
 1f2:	08 95       	ret
		_delay_ms(1000);
	}
	else if(leftTape)
 1f4:	89 2b       	or	r24, r25
	{
		stop();
 1f6:	81 f0       	breq	.+32     	; 0x218 <IRrun+0x54>
 1f8:	b0 d0       	rcall	.+352    	; 0x35a <stop>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	83 ed       	ldi	r24, 0xD3	; 211
 1fe:	90 e3       	ldi	r25, 0x30	; 48
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <IRrun+0x3c>
 208:	00 c0       	rjmp	.+0      	; 0x20a <IRrun+0x46>
 20a:	00 00       	nop
		_delay_ms(1000);
		TurnDegrees(15, 1);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	8f e0       	ldi	r24, 0x0F	; 15
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	d8 c0       	rjmp	.+432    	; 0x3c6 <TurnDegrees>
 216:	08 95       	ret
	}
	else if (rightTape)
 218:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 21c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
 220:	89 2b       	or	r24, r25
	{
		stop();
 222:	81 f0       	breq	.+32     	; 0x244 <IRrun+0x80>
 224:	9a d0       	rcall	.+308    	; 0x35a <stop>
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	83 ed       	ldi	r24, 0xD3	; 211
 22a:	90 e3       	ldi	r25, 0x30	; 48
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <IRrun+0x68>
 234:	00 c0       	rjmp	.+0      	; 0x236 <IRrun+0x72>
 236:	00 00       	nop
		_delay_ms(1000);
		TurnDegrees(15, 0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	8f e0       	ldi	r24, 0x0F	; 15
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	c2 c0       	rjmp	.+388    	; 0x3c6 <TurnDegrees>
	}
	else
	{
		goForwards();
 242:	08 95       	ret
 244:	87 d0       	rcall	.+270    	; 0x354 <goForwards>
		setSpeed(50);
 246:	82 e3       	ldi	r24, 0x32	; 50
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	9c c0       	rjmp	.+312    	; 0x384 <setSpeed>
 24c:	08 95       	ret

0000024e <__vector_17>:
 24e:	1f 92       	push	r1
}


void goForwards()
{
	PORTC = 0x05;
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	0b b6       	in	r0, 0x3b	; 59
 25a:	0f 92       	push	r0
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
 264:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SYNCH>
 268:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SYNCH+0x1>
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	39 f4       	brne	.+14     	; 0x27e <__vector_17+0x30>
 270:	eb e0       	ldi	r30, 0x0B	; 11
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	90 81       	ld	r25, Z
 276:	88 e1       	ldi	r24, 0x18	; 24
 278:	89 27       	eor	r24, r25
 27a:	80 83       	st	Z, r24
 27c:	06 c0       	rjmp	.+12     	; 0x28a <__vector_17+0x3c>
 27e:	eb e0       	ldi	r30, 0x0B	; 11
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	90 81       	ld	r25, Z
 284:	88 e0       	ldi	r24, 0x08	; 8
 286:	89 27       	eor	r24, r25
 288:	80 83       	st	Z, r24
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	0f 90       	pop	r0
 294:	0b be       	out	0x3b, r0	; 59
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_32>:
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	0b b6       	in	r0, 0x3b	; 59
 2ac:	0f 92       	push	r0
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
 2b6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SYNCH>
 2ba:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SYNCH+0x1>
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	31 f0       	breq	.+12     	; 0x2ce <__vector_32+0x2e>
 2c2:	eb e0       	ldi	r30, 0x0B	; 11
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	90 81       	ld	r25, Z
 2c8:	80 e1       	ldi	r24, 0x10	; 16
 2ca:	89 27       	eor	r24, r25
 2cc:	80 83       	st	Z, r24
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	0f 90       	pop	r0
 2d8:	0b be       	out	0x3b, r0	; 59
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <wheelSetup>:
 2e4:	60 ec       	ldi	r22, 0xC0	; 192
 2e6:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 2ea:	4a e0       	ldi	r20, 0x0A	; 10
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 2f2:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 2f6:	24 e6       	ldi	r18, 0x64	; 100
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 2fe:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 302:	92 e0       	ldi	r25, 0x02	; 2
 304:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
 308:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 30c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 310:	84 e1       	ldi	r24, 0x14	; 20
 312:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
 316:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 31a:	50 93 99 00 	sts	0x0099, r21	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 31e:	40 93 98 00 	sts	0x0098, r20	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 322:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 326:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
 32a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 32e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 332:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 336:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 340:	87 b9       	out	0x07, r24	; 7
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <SYNCH+0x1>
 34a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <SYNCH>
 34e:	85 e0       	ldi	r24, 0x05	; 5
 350:	88 b9       	out	0x08, r24	; 8
 352:	08 95       	ret

00000354 <goForwards>:
 354:	85 e0       	ldi	r24, 0x05	; 5
 356:	88 b9       	out	0x08, r24	; 8
 358:	08 95       	ret

0000035a <stop>:
 35a:	8c e2       	ldi	r24, 0x2C	; 44
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 362:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 366:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 36a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 36e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 372:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 376:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 37a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 37e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 382:	08 95       	ret

00000384 <setSpeed>:
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <SYNCH+0x1>
 390:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <SYNCH>
 394:	83 32       	cpi	r24, 0x23	; 35
 396:	91 05       	cpc	r25, r1
 398:	4c f0       	brlt	.+18     	; 0x3ac <setSpeed+0x28>
 39a:	c4 e6       	ldi	r28, 0x64	; 100
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	c8 1b       	sub	r28, r24
 3a0:	d9 0b       	sbc	r29, r25
 3a2:	c4 36       	cpi	r28, 0x64	; 100
 3a4:	d1 05       	cpc	r29, r1
 3a6:	21 f4       	brne	.+8      	; 0x3b0 <setSpeed+0x2c>
 3a8:	d8 df       	rcall	.-80     	; 0x35a <stop>
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <setSpeed+0x2c>
 3ac:	c3 e2       	ldi	r28, 0x23	; 35
 3ae:	d0 e0       	ldi	r29, 0x00	; 0
 3b0:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 3b4:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 3b8:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 3bc:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <TurnDegrees>:
	}
}


void TurnDegrees(int degree, int left)
{
 3c6:	8f 92       	push	r8
 3c8:	9f 92       	push	r9
 3ca:	af 92       	push	r10
 3cc:	bf 92       	push	r11
 3ce:	cf 92       	push	r12
 3d0:	df 92       	push	r13
 3d2:	ef 92       	push	r14
 3d4:	ff 92       	push	r15
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	4b 01       	movw	r8, r22
	int direction = left;
	int rotaryCount = (int)((double)degree/4.5);
	int leftCount = rotaryCount/2;
 3e0:	bc 01       	movw	r22, r24
 3e2:	99 0f       	add	r25, r25
 3e4:	88 0b       	sbc	r24, r24
 3e6:	99 0b       	sbc	r25, r25
 3e8:	30 d3       	rcall	.+1632   	; 0xa4a <__floatsisf>
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	40 e9       	ldi	r20, 0x90	; 144
 3f0:	50 e4       	ldi	r21, 0x40	; 64
 3f2:	90 d2       	rcall	.+1312   	; 0x914 <__divsf3>
 3f4:	f7 d2       	rcall	.+1518   	; 0x9e4 <__fixsfsi>
 3f6:	6b 01       	movw	r12, r22
 3f8:	77 23       	and	r23, r23
 3fa:	1c f4       	brge	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	c2 1a       	sub	r12, r18
 400:	d2 0a       	sbc	r13, r18
 402:	d5 94       	asr	r13
 404:	c7 94       	ror	r12
	int rightCount = rotaryCount/2;
	
	int startingRight = getRightRotaryCount();
 406:	8e d0       	rcall	.+284    	; 0x524 <getRightRotaryCount>
 408:	5c 01       	movw	r10, r24
	int rightCurrent = getRightRotaryCount();
 40a:	8c d0       	rcall	.+280    	; 0x524 <getRightRotaryCount>
 40c:	8c 01       	movw	r16, r24
	int startingLeft = getLeftRotaryCount();
 40e:	85 d0       	rcall	.+266    	; 0x51a <getLeftRotaryCount>
 410:	7c 01       	movw	r14, r24
 412:	83 d0       	rcall	.+262    	; 0x51a <getLeftRotaryCount>
	int leftCurrent = getLeftRotaryCount();
 414:	ec 01       	movw	r28, r24
 416:	8a 94       	dec	r8
 418:	89 28       	or	r8, r9
	
	//Turn Left
	if(direction == 1)
 41a:	19 f4       	brne	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41c:	83 e0       	ldi	r24, 0x03	; 3
 41e:	88 b9       	out	0x08, r24	; 8
{
	PORTC = 0x0C;
}
void rightForwardsLeftBack()
{
	PORTC = 0x03;
 420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	8c e0       	ldi	r24, 0x0C	; 12
	}
}

void leftForwardsRightBack()
{
	PORTC = 0x0C;
 424:	88 b9       	out	0x08, r24	; 8
 426:	82 e3       	ldi	r24, 0x32	; 50
	//Turn Right
	else
	{
		leftForwardsRightBack();
	}
	setSpeed(50);
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	ac df       	rcall	.-168    	; 0x384 <setSpeed>
 42c:	ec 0c       	add	r14, r12
	
	while((leftCurrent < (startingLeft + leftCount)) && (rightCurrent < (startingRight + rightCount)))
 42e:	fd 1c       	adc	r15, r13
 430:	ca 0c       	add	r12, r10
 432:	db 1c       	adc	r13, r11
 434:	10 c0       	rjmp	.+32     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 436:	71 d0       	rcall	.+226    	; 0x51a <getLeftRotaryCount>
			char held[100];
			sprintf(held, "Left: %d Right: %d LeftMeet: %d RightMeet: %d", getLeftRotaryCount(), getRightRotaryCount(), (startingLeft + leftCount), (startingRight + rightCount));
			Serial0_poll_print(held);
			_delay_ms(3000);
			*/
		leftCurrent = getLeftRotaryCount();
 438:	ec 01       	movw	r28, r24
 43a:	74 d0       	rcall	.+232    	; 0x524 <getRightRotaryCount>
 43c:	8c 01       	movw	r16, r24
		rightCurrent = getRightRotaryCount();
 43e:	ce 15       	cp	r28, r14
 440:	df 05       	cpc	r29, r15
 442:	1c f0       	brlt	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		
		if(leftCurrent >= (startingLeft + leftCount))
 444:	88 b1       	in	r24, 0x08	; 8
 446:	89 7f       	andi	r24, 0xF9	; 249
 448:	88 b9       	out	0x08, r24	; 8
		{
			PORTC &= ~(0x06);
 44a:	0c 15       	cp	r16, r12
 44c:	1d 05       	cpc	r17, r13
 44e:	1c f0       	brlt	.+6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		}
		if(rightCurrent >= (startingRight + rightCount))
 450:	88 b1       	in	r24, 0x08	; 8
 452:	86 7f       	andi	r24, 0xF6	; 246
 454:	88 b9       	out	0x08, r24	; 8
		{
			PORTC &= ~(0x09);
 456:	ce 15       	cp	r28, r14
 458:	df 05       	cpc	r29, r15
 45a:	1c f4       	brge	.+6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	{
		leftForwardsRightBack();
	}
	setSpeed(50);
	
	while((leftCurrent < (startingLeft + leftCount)) && (rightCurrent < (startingRight + rightCount)))
 45c:	0c 15       	cp	r16, r12
 45e:	1d 05       	cpc	r17, r13
 460:	54 f3       	brlt	.-44     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	1f 91       	pop	r17
		if(rightCurrent >= (startingRight + rightCount))
		{
			PORTC &= ~(0x09);
		}
	}
}
 468:	0f 91       	pop	r16
 46a:	ff 90       	pop	r15
 46c:	ef 90       	pop	r14
 46e:	df 90       	pop	r13
 470:	cf 90       	pop	r12
 472:	bf 90       	pop	r11
 474:	af 90       	pop	r10
 476:	9f 90       	pop	r9
 478:	8f 90       	pop	r8
 47a:	08 95       	ret

0000047c <__vector_10>:

volatile int right;
volatile int left;

volatile char PCINT1_STATE = 0;
ISR(PCINT1_vect) {	
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	11 24       	eor	r1, r1
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
	
	char CURRENT_STATE = PINJ;
 48e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	char changed = CURRENT_STATE ^ PCINT1_STATE;
 492:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <PCINT1_STATE>
 496:	98 27       	eor	r25, r24
	
    if ((CURRENT_STATE&0x01)==0x01 && (changed&0x01) == 0x01)
 498:	80 ff       	sbrs	r24, 0
 49a:	0c c0       	rjmp	.+24     	; 0x4b4 <__vector_10+0x38>
 49c:	90 ff       	sbrs	r25, 0
 49e:	0a c0       	rjmp	.+20     	; 0x4b4 <__vector_10+0x38>
	{ 
		right++;
 4a0:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <right>
 4a4:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <right+0x1>
 4a8:	2f 5f       	subi	r18, 0xFF	; 255
 4aa:	3f 4f       	sbci	r19, 0xFF	; 255
 4ac:	30 93 25 02 	sts	0x0225, r19	; 0x800225 <right+0x1>
 4b0:	20 93 24 02 	sts	0x0224, r18	; 0x800224 <right>
	}
    if ((CURRENT_STATE&0x02)==0x02 && (changed&0x02) == 0x02)
 4b4:	81 ff       	sbrs	r24, 1
 4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <__vector_10+0x54>
 4b8:	91 ff       	sbrs	r25, 1
 4ba:	0a c0       	rjmp	.+20     	; 0x4d0 <__vector_10+0x54>
	{
		left++;
 4bc:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <left>
 4c0:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <left+0x1>
 4c4:	2f 5f       	subi	r18, 0xFF	; 255
 4c6:	3f 4f       	sbci	r19, 0xFF	; 255
 4c8:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <left+0x1>
 4cc:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <left>
	//sprintf(held, "Left: %d Right: %d Current State: %x Changed: %x\n", left, right, CURRENT_STATE, changed);
	sprintf(held, "%d", left);
	Serial0_poll_print(held);
	_delay_ms(500);
	*/
	PCINT1_STATE = CURRENT_STATE;
 4d0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PCINT1_STATE>
}
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <RotarySetup>:

void RotarySetup()
{
	MCUCR = 0x03;
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	85 bf       	out	0x35, r24	; 53
    right = 0;
 4ea:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <right+0x1>
 4ee:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <right>
    left = 0;
 4f2:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <left+0x1>
 4f6:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <left>
	DDRJ = 0x00;
 4fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	PORTJ = 0x00;
 4fe:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	
    PCICR |= 0x07;
 502:	e8 e6       	ldi	r30, 0x68	; 104
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	87 60       	ori	r24, 0x07	; 7
 50a:	80 83       	st	Z, r24
	PCIFR |= 0x02;
 50c:	d9 9a       	sbi	0x1b, 1	; 27
	//Enable PCINT 9 & 10
    PCMSK1 |= 0x06;
 50e:	ec e6       	ldi	r30, 0x6C	; 108
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	86 60       	ori	r24, 0x06	; 6
 516:	80 83       	st	Z, r24
 518:	08 95       	ret

0000051a <getLeftRotaryCount>:
}

int getLeftRotaryCount()
{
	return left;
 51a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <left>
 51e:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <left+0x1>
}
 522:	08 95       	ret

00000524 <getRightRotaryCount>:
int getRightRotaryCount()
{
	return right;
 524:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <right>
 528:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <right+0x1>
 52c:	08 95       	ret

0000052e <__vector_11>:
	return distanceLeft;
}


ISR(PCINT2_vect)//interrupt service routine when there is a change in logic level
{
 52e:	1f 92       	push	r1
 530:	0f 92       	push	r0
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	0f 92       	push	r0
 536:	11 24       	eor	r1, r1
 538:	0b b6       	in	r0, 0x3b	; 59
 53a:	0f 92       	push	r0
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	cf 93       	push	r28
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
	char CURRENT_STATE = PINK;
 556:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
	char changed = CURRENT_STATE ^ PCINT2_STATE;
 55a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <PCINT2_STATE>
 55e:	8c 27       	eor	r24, r28
	Serial0_poll_print(held);
	_delay_ms(3000);
	*/
	
	
	if(changed == 1)
 560:	81 30       	cpi	r24, 0x01	; 1
 562:	09 f0       	breq	.+2      	; 0x566 <__vector_11+0x38>
 564:	a5 c0       	rjmp	.+330    	; 0x6b0 <__vector_11+0x182>
	{
		if (leftInc==1)//when logic from HIGH to LOW
 566:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <leftInc>
 56a:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <leftInc+0x1>
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	09 f0       	breq	.+2      	; 0x574 <__vector_11+0x46>
 572:	8b c0       	rjmp	.+278    	; 0x68a <__vector_11+0x15c>
		{
			TCCR4B=0;//disabling counter
 574:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
			leftPulse=TCNT4;//count memory is updated to integer
 578:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
 57c:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 580:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <leftPulse+0x1>
 584:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <leftPulse>
			
		    distanceLeft = ((double)leftPulse/148.0)/14.0;
 588:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <leftPulse>
 58c:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <leftPulse+0x1>
 590:	07 2e       	mov	r0, r23
 592:	00 0c       	add	r0, r0
 594:	88 0b       	sbc	r24, r24
 596:	99 0b       	sbc	r25, r25
 598:	58 d2       	rcall	.+1200   	; 0xa4a <__floatsisf>
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	44 e1       	ldi	r20, 0x14	; 20
 5a0:	53 e4       	ldi	r21, 0x43	; 67
 5a2:	b8 d1       	rcall	.+880    	; 0x914 <__divsf3>
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	40 e6       	ldi	r20, 0x60	; 96
 5aa:	51 e4       	ldi	r21, 0x41	; 65
 5ac:	b3 d1       	rcall	.+870    	; 0x914 <__divsf3>
 5ae:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <distanceLeft>
 5b2:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <distanceLeft+0x1>
 5b6:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <distanceLeft+0x2>
 5ba:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <distanceLeft+0x3>
			distanceLeft = distanceLeft*1.1;
 5be:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <distanceLeft>
 5c2:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <distanceLeft+0x1>
 5c6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <distanceLeft+0x2>
 5ca:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <distanceLeft+0x3>
 5ce:	2d ec       	ldi	r18, 0xCD	; 205
 5d0:	3c ec       	ldi	r19, 0xCC	; 204
 5d2:	4c e8       	ldi	r20, 0x8C	; 140
 5d4:	5f e3       	ldi	r21, 0x3F	; 63
 5d6:	c5 d2       	rcall	.+1418   	; 0xb62 <__mulsf3>
 5d8:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <distanceLeft>
 5dc:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <distanceLeft+0x1>
 5e0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <distanceLeft+0x2>
 5e4:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <distanceLeft+0x3>
			
			avgL += distanceLeft;
 5e8:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <distanceLeft>
 5ec:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <distanceLeft+0x1>
 5f0:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <distanceLeft+0x2>
 5f4:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <distanceLeft+0x3>
 5f8:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <avgL>
 5fc:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <avgL+0x1>
 600:	40 91 0f 02 	lds	r20, 0x020F	; 0x80020f <avgL+0x2>
 604:	50 91 10 02 	lds	r21, 0x0210	; 0x800210 <avgL+0x3>
 608:	21 d1       	rcall	.+578    	; 0x84c <__addsf3>
 60a:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <avgL>
 60e:	70 93 0e 02 	sts	0x020E, r23	; 0x80020e <avgL+0x1>
 612:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <avgL+0x2>
 616:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <avgL+0x3>
			avg_countL++;
 61a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <avg_countL>
 61e:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <avg_countL+0x1>
 622:	01 96       	adiw	r24, 0x01	; 1
 624:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <avg_countL+0x1>
 628:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <avg_countL>
			if (avg_countL == 5) {
 62c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <avg_countL>
 630:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <avg_countL+0x1>
 634:	05 97       	sbiw	r24, 0x05	; 5
 636:	09 f5       	brne	.+66     	; 0x67a <__vector_11+0x14c>
				distanceLeft = avgL / 5;	
 638:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <avgL>
 63c:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <avgL+0x1>
 640:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <avgL+0x2>
 644:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <avgL+0x3>
 648:	20 e0       	ldi	r18, 0x00	; 0
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	40 ea       	ldi	r20, 0xA0	; 160
 64e:	50 e4       	ldi	r21, 0x40	; 64
 650:	61 d1       	rcall	.+706    	; 0x914 <__divsf3>
 652:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <distanceLeft>
 656:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <distanceLeft+0x1>
 65a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <distanceLeft+0x2>
 65e:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <distanceLeft+0x3>
				avg_countL = 0;
 662:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <avg_countL+0x1>
 666:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <avg_countL>
				avgL = 0;
 66a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <avgL>
 66e:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <avgL+0x1>
 672:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <avgL+0x2>
 676:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <avgL+0x3>
			}
			
			TCNT4=0;//resetting the counter memory
 67a:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 67e:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
			leftInc=0;
 682:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <leftInc+0x1>
 686:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <leftInc>
		}

		if (leftInc==0)//when logic change from LOW to HIGH
 68a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <leftInc>
 68e:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <leftInc+0x1>
 692:	89 2b       	or	r24, r25
 694:	09 f0       	breq	.+2      	; 0x698 <__vector_11+0x16a>
 696:	96 c0       	rjmp	.+300    	; 0x7c4 <__vector_11+0x296>
		{
			TCCR4B |=(1);//enabling counter
 698:	e1 ea       	ldi	r30, 0xA1	; 161
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	80 81       	ld	r24, Z
 69e:	81 60       	ori	r24, 0x01	; 1
 6a0:	80 83       	st	Z, r24
			leftInc=1;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <leftInc+0x1>
 6aa:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <leftInc>
 6ae:	8a c0       	rjmp	.+276    	; 0x7c4 <__vector_11+0x296>
		}
	}
	else if(changed == 2)
 6b0:	82 30       	cpi	r24, 0x02	; 2
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <__vector_11+0x188>
 6b4:	87 c0       	rjmp	.+270    	; 0x7c4 <__vector_11+0x296>
	{
		if (rightInc==1)//when logic from HIGH to LOW
 6b6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <rightInc>
 6ba:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <rightInc+0x1>
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	09 f0       	breq	.+2      	; 0x6c4 <__vector_11+0x196>
 6c2:	6f c0       	rjmp	.+222    	; 0x7a2 <__vector_11+0x274>
		{
			TCCR4B=0;//disabling counter
 6c4:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
			rightPulse=TCNT4;//count memory is updated to integer
 6c8:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
 6cc:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 6d0:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <rightPulse+0x1>
 6d4:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <rightPulse>
			
			distanceRight = (rightPulse/148)/14;
 6d8:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <rightPulse>
 6dc:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <rightPulse+0x1>
 6e0:	68 e1       	ldi	r22, 0x18	; 24
 6e2:	78 e0       	ldi	r23, 0x08	; 8
 6e4:	a1 d2       	rcall	.+1346   	; 0xc28 <__divmodhi4>
 6e6:	07 2e       	mov	r0, r23
 6e8:	00 0c       	add	r0, r0
 6ea:	88 0b       	sbc	r24, r24
 6ec:	99 0b       	sbc	r25, r25
 6ee:	ad d1       	rcall	.+858    	; 0xa4a <__floatsisf>
 6f0:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <__data_start>
 6f4:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <__data_start+0x1>
 6f8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_start+0x2>
 6fc:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_start+0x3>
			avgR += distanceRight;
 700:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__data_start>
 704:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__data_start+0x1>
 708:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_start+0x2>
 70c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_start+0x3>
 710:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <avgR>
 714:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <avgR+0x1>
 718:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <avgR+0x2>
 71c:	50 91 0c 02 	lds	r21, 0x020C	; 0x80020c <avgR+0x3>
 720:	95 d0       	rcall	.+298    	; 0x84c <__addsf3>
 722:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <avgR>
 726:	70 93 0a 02 	sts	0x020A, r23	; 0x80020a <avgR+0x1>
 72a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <avgR+0x2>
 72e:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <avgR+0x3>
			avg_countR++;
 732:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <avg_countR>
 736:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <avg_countR+0x1>
 73a:	01 96       	adiw	r24, 0x01	; 1
 73c:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <avg_countR+0x1>
 740:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <avg_countR>
			if (avg_countR == 5) {
 744:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <avg_countR>
 748:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <avg_countR+0x1>
 74c:	05 97       	sbiw	r24, 0x05	; 5
 74e:	09 f5       	brne	.+66     	; 0x792 <__vector_11+0x264>
				distanceRight = avgR / 5;
 750:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <avgR>
 754:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <avgR+0x1>
 758:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <avgR+0x2>
 75c:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <avgR+0x3>
 760:	20 e0       	ldi	r18, 0x00	; 0
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	40 ea       	ldi	r20, 0xA0	; 160
 766:	50 e4       	ldi	r21, 0x40	; 64
 768:	d5 d0       	rcall	.+426    	; 0x914 <__divsf3>
 76a:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <__data_start>
 76e:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <__data_start+0x1>
 772:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_start+0x2>
 776:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_start+0x3>
				avg_countR = 0;
 77a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <avg_countR+0x1>
 77e:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <avg_countR>
				avgR = 0;
 782:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <avgR>
 786:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <avgR+0x1>
 78a:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <avgR+0x2>
 78e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <avgR+0x3>
			}
			
			TCNT4=0;//resetting the counter memory
 792:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 796:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
			rightInc=0;
 79a:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <rightInc+0x1>
 79e:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <rightInc>
		}

		if (rightInc==0)//when logic change from LOW to HIGH
 7a2:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <rightInc>
 7a6:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <rightInc+0x1>
 7aa:	89 2b       	or	r24, r25
 7ac:	59 f4       	brne	.+22     	; 0x7c4 <__vector_11+0x296>
		{
			TCCR4B |= 1;//enabling counter
 7ae:	e1 ea       	ldi	r30, 0xA1	; 161
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	81 60       	ori	r24, 0x01	; 1
 7b6:	80 83       	st	Z, r24
			rightInc=1;
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <rightInc+0x1>
 7c0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <rightInc>
		}
	}
	
	PCINT2_STATE = CURRENT_STATE;
 7c4:	c0 93 15 02 	sts	0x0215, r28	; 0x800215 <PCINT2_STATE>
}
 7c8:	ff 91       	pop	r31
 7ca:	ef 91       	pop	r30
 7cc:	cf 91       	pop	r28
 7ce:	bf 91       	pop	r27
 7d0:	af 91       	pop	r26
 7d2:	9f 91       	pop	r25
 7d4:	8f 91       	pop	r24
 7d6:	7f 91       	pop	r23
 7d8:	6f 91       	pop	r22
 7da:	5f 91       	pop	r21
 7dc:	4f 91       	pop	r20
 7de:	3f 91       	pop	r19
 7e0:	2f 91       	pop	r18
 7e2:	0f 90       	pop	r0
 7e4:	0b be       	out	0x3b, r0	; 59
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <setUpUltraSonic>:

void setUpUltraSonic()
{
	
	DDRB = 0x80;
 7f0:	80 e8       	ldi	r24, 0x80	; 128
 7f2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 7f4:	15 b8       	out	0x05, r1	; 5
	
	PRR0 = 0x00;
 7f6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
	
	DDRK = 0x00;
 7fa:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	PORTK = 0x00;
 7fe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	
	
	MCUCR = 0x03;
 802:	93 e0       	ldi	r25, 0x03	; 3
 804:	95 bf       	out	0x35, r25	; 53
	
	//Enable Interrupt 2
	PCICR |= 0x04;
 806:	e8 e6       	ldi	r30, 0x68	; 104
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	84 60       	ori	r24, 0x04	; 4
 80e:	80 83       	st	Z, r24
	
	//Set A8 A9 as Interrupt pins
	PCMSK2 |= 0x03;	
 810:	ed e6       	ldi	r30, 0x6D	; 109
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	83 60       	ori	r24, 0x03	; 3
 818:	80 83       	st	Z, r24
	
	TCCR4A = 0;
 81a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	
	DDRF = 0x03;
 81e:	90 bb       	out	0x10, r25	; 16
 820:	08 95       	ret

00000822 <main>:
#include "IRsensor.h"


int main (void)
{
	sei();
 822:	78 94       	sei
 824:	2f ef       	ldi	r18, 0xFF	; 255
 826:	8f e4       	ldi	r24, 0x4F	; 79
 828:	93 ec       	ldi	r25, 0xC3	; 195
 82a:	21 50       	subi	r18, 0x01	; 1
 82c:	80 40       	sbci	r24, 0x00	; 0
 82e:	90 40       	sbci	r25, 0x00	; 0
 830:	e1 f7       	brne	.-8      	; 0x82a <main+0x8>
 832:	00 c0       	rjmp	.+0      	; 0x834 <main+0x12>
 834:	00 00       	nop
	_delay_ms(4000);
	setUpUltraSonic();
 836:	dc df       	rcall	.-72     	; 0x7f0 <setUpUltraSonic>
	wheelSetup();
 838:	55 dd       	rcall	.-1366   	; 0x2e4 <wheelSetup>
	RotarySetup();
 83a:	55 de       	rcall	.-854    	; 0x4e6 <RotarySetup>
	IRsetup();
 83c:	73 dc       	rcall	.-1818   	; 0x124 <IRsetup>
	
	stop();
 83e:	8d dd       	rcall	.-1254   	; 0x35a <stop>
	//Serial0_config(115200, SERIAL_8N1);
	setSpeed(99);
 840:	83 e6       	ldi	r24, 0x63	; 99
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	9f dd       	rcall	.-1218   	; 0x384 <setSpeed>
 846:	be dc       	rcall	.-1668   	; 0x1c4 <IRrun>
	
	
	while(1)
	{
		IRrun();
 848:	fe cf       	rjmp	.-4      	; 0x846 <main+0x24>

0000084a <__subsf3>:
 84a:	50 58       	subi	r21, 0x80	; 128

0000084c <__addsf3>:
 84c:	bb 27       	eor	r27, r27
 84e:	aa 27       	eor	r26, r26
 850:	0e d0       	rcall	.+28     	; 0x86e <__addsf3x>
 852:	4d c1       	rjmp	.+666    	; 0xaee <__fp_round>
 854:	3e d1       	rcall	.+636    	; 0xad2 <__fp_pscA>
 856:	30 f0       	brcs	.+12     	; 0x864 <__addsf3+0x18>
 858:	43 d1       	rcall	.+646    	; 0xae0 <__fp_pscB>
 85a:	20 f0       	brcs	.+8      	; 0x864 <__addsf3+0x18>
 85c:	31 f4       	brne	.+12     	; 0x86a <__addsf3+0x1e>
 85e:	9f 3f       	cpi	r25, 0xFF	; 255
 860:	11 f4       	brne	.+4      	; 0x866 <__addsf3+0x1a>
 862:	1e f4       	brtc	.+6      	; 0x86a <__addsf3+0x1e>
 864:	33 c1       	rjmp	.+614    	; 0xacc <__fp_nan>
 866:	0e f4       	brtc	.+2      	; 0x86a <__addsf3+0x1e>
 868:	e0 95       	com	r30
 86a:	e7 fb       	bst	r30, 7
 86c:	29 c1       	rjmp	.+594    	; 0xac0 <__fp_inf>

0000086e <__addsf3x>:
 86e:	e9 2f       	mov	r30, r25
 870:	4f d1       	rcall	.+670    	; 0xb10 <__fp_split3>
 872:	80 f3       	brcs	.-32     	; 0x854 <__addsf3+0x8>
 874:	ba 17       	cp	r27, r26
 876:	62 07       	cpc	r22, r18
 878:	73 07       	cpc	r23, r19
 87a:	84 07       	cpc	r24, r20
 87c:	95 07       	cpc	r25, r21
 87e:	18 f0       	brcs	.+6      	; 0x886 <__addsf3x+0x18>
 880:	71 f4       	brne	.+28     	; 0x89e <__addsf3x+0x30>
 882:	9e f5       	brtc	.+102    	; 0x8ea <__addsf3x+0x7c>
 884:	67 c1       	rjmp	.+718    	; 0xb54 <__fp_zero>
 886:	0e f4       	brtc	.+2      	; 0x88a <__addsf3x+0x1c>
 888:	e0 95       	com	r30
 88a:	0b 2e       	mov	r0, r27
 88c:	ba 2f       	mov	r27, r26
 88e:	a0 2d       	mov	r26, r0
 890:	0b 01       	movw	r0, r22
 892:	b9 01       	movw	r22, r18
 894:	90 01       	movw	r18, r0
 896:	0c 01       	movw	r0, r24
 898:	ca 01       	movw	r24, r20
 89a:	a0 01       	movw	r20, r0
 89c:	11 24       	eor	r1, r1
 89e:	ff 27       	eor	r31, r31
 8a0:	59 1b       	sub	r21, r25
 8a2:	99 f0       	breq	.+38     	; 0x8ca <__addsf3x+0x5c>
 8a4:	59 3f       	cpi	r21, 0xF9	; 249
 8a6:	50 f4       	brcc	.+20     	; 0x8bc <__addsf3x+0x4e>
 8a8:	50 3e       	cpi	r21, 0xE0	; 224
 8aa:	68 f1       	brcs	.+90     	; 0x906 <__addsf3x+0x98>
 8ac:	1a 16       	cp	r1, r26
 8ae:	f0 40       	sbci	r31, 0x00	; 0
 8b0:	a2 2f       	mov	r26, r18
 8b2:	23 2f       	mov	r18, r19
 8b4:	34 2f       	mov	r19, r20
 8b6:	44 27       	eor	r20, r20
 8b8:	58 5f       	subi	r21, 0xF8	; 248
 8ba:	f3 cf       	rjmp	.-26     	; 0x8a2 <__addsf3x+0x34>
 8bc:	46 95       	lsr	r20
 8be:	37 95       	ror	r19
 8c0:	27 95       	ror	r18
 8c2:	a7 95       	ror	r26
 8c4:	f0 40       	sbci	r31, 0x00	; 0
 8c6:	53 95       	inc	r21
 8c8:	c9 f7       	brne	.-14     	; 0x8bc <__addsf3x+0x4e>
 8ca:	7e f4       	brtc	.+30     	; 0x8ea <__addsf3x+0x7c>
 8cc:	1f 16       	cp	r1, r31
 8ce:	ba 0b       	sbc	r27, r26
 8d0:	62 0b       	sbc	r22, r18
 8d2:	73 0b       	sbc	r23, r19
 8d4:	84 0b       	sbc	r24, r20
 8d6:	ba f0       	brmi	.+46     	; 0x906 <__addsf3x+0x98>
 8d8:	91 50       	subi	r25, 0x01	; 1
 8da:	a1 f0       	breq	.+40     	; 0x904 <__addsf3x+0x96>
 8dc:	ff 0f       	add	r31, r31
 8de:	bb 1f       	adc	r27, r27
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	c2 f7       	brpl	.-16     	; 0x8d8 <__addsf3x+0x6a>
 8e8:	0e c0       	rjmp	.+28     	; 0x906 <__addsf3x+0x98>
 8ea:	ba 0f       	add	r27, r26
 8ec:	62 1f       	adc	r22, r18
 8ee:	73 1f       	adc	r23, r19
 8f0:	84 1f       	adc	r24, r20
 8f2:	48 f4       	brcc	.+18     	; 0x906 <__addsf3x+0x98>
 8f4:	87 95       	ror	r24
 8f6:	77 95       	ror	r23
 8f8:	67 95       	ror	r22
 8fa:	b7 95       	ror	r27
 8fc:	f7 95       	ror	r31
 8fe:	9e 3f       	cpi	r25, 0xFE	; 254
 900:	08 f0       	brcs	.+2      	; 0x904 <__addsf3x+0x96>
 902:	b3 cf       	rjmp	.-154    	; 0x86a <__addsf3+0x1e>
 904:	93 95       	inc	r25
 906:	88 0f       	add	r24, r24
 908:	08 f0       	brcs	.+2      	; 0x90c <__addsf3x+0x9e>
 90a:	99 27       	eor	r25, r25
 90c:	ee 0f       	add	r30, r30
 90e:	97 95       	ror	r25
 910:	87 95       	ror	r24
 912:	08 95       	ret

00000914 <__divsf3>:
 914:	0c d0       	rcall	.+24     	; 0x92e <__divsf3x>
 916:	eb c0       	rjmp	.+470    	; 0xaee <__fp_round>
 918:	e3 d0       	rcall	.+454    	; 0xae0 <__fp_pscB>
 91a:	40 f0       	brcs	.+16     	; 0x92c <__divsf3+0x18>
 91c:	da d0       	rcall	.+436    	; 0xad2 <__fp_pscA>
 91e:	30 f0       	brcs	.+12     	; 0x92c <__divsf3+0x18>
 920:	21 f4       	brne	.+8      	; 0x92a <__divsf3+0x16>
 922:	5f 3f       	cpi	r21, 0xFF	; 255
 924:	19 f0       	breq	.+6      	; 0x92c <__divsf3+0x18>
 926:	cc c0       	rjmp	.+408    	; 0xac0 <__fp_inf>
 928:	51 11       	cpse	r21, r1
 92a:	15 c1       	rjmp	.+554    	; 0xb56 <__fp_szero>
 92c:	cf c0       	rjmp	.+414    	; 0xacc <__fp_nan>

0000092e <__divsf3x>:
 92e:	f0 d0       	rcall	.+480    	; 0xb10 <__fp_split3>
 930:	98 f3       	brcs	.-26     	; 0x918 <__divsf3+0x4>

00000932 <__divsf3_pse>:
 932:	99 23       	and	r25, r25
 934:	c9 f3       	breq	.-14     	; 0x928 <__divsf3+0x14>
 936:	55 23       	and	r21, r21
 938:	b1 f3       	breq	.-20     	; 0x926 <__divsf3+0x12>
 93a:	95 1b       	sub	r25, r21
 93c:	55 0b       	sbc	r21, r21
 93e:	bb 27       	eor	r27, r27
 940:	aa 27       	eor	r26, r26
 942:	62 17       	cp	r22, r18
 944:	73 07       	cpc	r23, r19
 946:	84 07       	cpc	r24, r20
 948:	38 f0       	brcs	.+14     	; 0x958 <__divsf3_pse+0x26>
 94a:	9f 5f       	subi	r25, 0xFF	; 255
 94c:	5f 4f       	sbci	r21, 0xFF	; 255
 94e:	22 0f       	add	r18, r18
 950:	33 1f       	adc	r19, r19
 952:	44 1f       	adc	r20, r20
 954:	aa 1f       	adc	r26, r26
 956:	a9 f3       	breq	.-22     	; 0x942 <__divsf3_pse+0x10>
 958:	33 d0       	rcall	.+102    	; 0x9c0 <__divsf3_pse+0x8e>
 95a:	0e 2e       	mov	r0, r30
 95c:	3a f0       	brmi	.+14     	; 0x96c <__divsf3_pse+0x3a>
 95e:	e0 e8       	ldi	r30, 0x80	; 128
 960:	30 d0       	rcall	.+96     	; 0x9c2 <__divsf3_pse+0x90>
 962:	91 50       	subi	r25, 0x01	; 1
 964:	50 40       	sbci	r21, 0x00	; 0
 966:	e6 95       	lsr	r30
 968:	00 1c       	adc	r0, r0
 96a:	ca f7       	brpl	.-14     	; 0x95e <__divsf3_pse+0x2c>
 96c:	29 d0       	rcall	.+82     	; 0x9c0 <__divsf3_pse+0x8e>
 96e:	fe 2f       	mov	r31, r30
 970:	27 d0       	rcall	.+78     	; 0x9c0 <__divsf3_pse+0x8e>
 972:	66 0f       	add	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	bb 1f       	adc	r27, r27
 97a:	26 17       	cp	r18, r22
 97c:	37 07       	cpc	r19, r23
 97e:	48 07       	cpc	r20, r24
 980:	ab 07       	cpc	r26, r27
 982:	b0 e8       	ldi	r27, 0x80	; 128
 984:	09 f0       	breq	.+2      	; 0x988 <__divsf3_pse+0x56>
 986:	bb 0b       	sbc	r27, r27
 988:	80 2d       	mov	r24, r0
 98a:	bf 01       	movw	r22, r30
 98c:	ff 27       	eor	r31, r31
 98e:	93 58       	subi	r25, 0x83	; 131
 990:	5f 4f       	sbci	r21, 0xFF	; 255
 992:	2a f0       	brmi	.+10     	; 0x99e <__divsf3_pse+0x6c>
 994:	9e 3f       	cpi	r25, 0xFE	; 254
 996:	51 05       	cpc	r21, r1
 998:	68 f0       	brcs	.+26     	; 0x9b4 <__divsf3_pse+0x82>
 99a:	92 c0       	rjmp	.+292    	; 0xac0 <__fp_inf>
 99c:	dc c0       	rjmp	.+440    	; 0xb56 <__fp_szero>
 99e:	5f 3f       	cpi	r21, 0xFF	; 255
 9a0:	ec f3       	brlt	.-6      	; 0x99c <__divsf3_pse+0x6a>
 9a2:	98 3e       	cpi	r25, 0xE8	; 232
 9a4:	dc f3       	brlt	.-10     	; 0x99c <__divsf3_pse+0x6a>
 9a6:	86 95       	lsr	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	b7 95       	ror	r27
 9ae:	f7 95       	ror	r31
 9b0:	9f 5f       	subi	r25, 0xFF	; 255
 9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__divsf3_pse+0x74>
 9b4:	88 0f       	add	r24, r24
 9b6:	91 1d       	adc	r25, r1
 9b8:	96 95       	lsr	r25
 9ba:	87 95       	ror	r24
 9bc:	97 f9       	bld	r25, 7
 9be:	08 95       	ret
 9c0:	e1 e0       	ldi	r30, 0x01	; 1
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	bb 1f       	adc	r27, r27
 9ca:	62 17       	cp	r22, r18
 9cc:	73 07       	cpc	r23, r19
 9ce:	84 07       	cpc	r24, r20
 9d0:	ba 07       	cpc	r27, r26
 9d2:	20 f0       	brcs	.+8      	; 0x9dc <__divsf3_pse+0xaa>
 9d4:	62 1b       	sub	r22, r18
 9d6:	73 0b       	sbc	r23, r19
 9d8:	84 0b       	sbc	r24, r20
 9da:	ba 0b       	sbc	r27, r26
 9dc:	ee 1f       	adc	r30, r30
 9de:	88 f7       	brcc	.-30     	; 0x9c2 <__divsf3_pse+0x90>
 9e0:	e0 95       	com	r30
 9e2:	08 95       	ret

000009e4 <__fixsfsi>:
 9e4:	04 d0       	rcall	.+8      	; 0x9ee <__fixunssfsi>
 9e6:	68 94       	set
 9e8:	b1 11       	cpse	r27, r1
 9ea:	b5 c0       	rjmp	.+362    	; 0xb56 <__fp_szero>
 9ec:	08 95       	ret

000009ee <__fixunssfsi>:
 9ee:	98 d0       	rcall	.+304    	; 0xb20 <__fp_splitA>
 9f0:	88 f0       	brcs	.+34     	; 0xa14 <__fixunssfsi+0x26>
 9f2:	9f 57       	subi	r25, 0x7F	; 127
 9f4:	90 f0       	brcs	.+36     	; 0xa1a <__fixunssfsi+0x2c>
 9f6:	b9 2f       	mov	r27, r25
 9f8:	99 27       	eor	r25, r25
 9fa:	b7 51       	subi	r27, 0x17	; 23
 9fc:	a0 f0       	brcs	.+40     	; 0xa26 <__fixunssfsi+0x38>
 9fe:	d1 f0       	breq	.+52     	; 0xa34 <__fixunssfsi+0x46>
 a00:	66 0f       	add	r22, r22
 a02:	77 1f       	adc	r23, r23
 a04:	88 1f       	adc	r24, r24
 a06:	99 1f       	adc	r25, r25
 a08:	1a f0       	brmi	.+6      	; 0xa10 <__fixunssfsi+0x22>
 a0a:	ba 95       	dec	r27
 a0c:	c9 f7       	brne	.-14     	; 0xa00 <__fixunssfsi+0x12>
 a0e:	12 c0       	rjmp	.+36     	; 0xa34 <__fixunssfsi+0x46>
 a10:	b1 30       	cpi	r27, 0x01	; 1
 a12:	81 f0       	breq	.+32     	; 0xa34 <__fixunssfsi+0x46>
 a14:	9f d0       	rcall	.+318    	; 0xb54 <__fp_zero>
 a16:	b1 e0       	ldi	r27, 0x01	; 1
 a18:	08 95       	ret
 a1a:	9c c0       	rjmp	.+312    	; 0xb54 <__fp_zero>
 a1c:	67 2f       	mov	r22, r23
 a1e:	78 2f       	mov	r23, r24
 a20:	88 27       	eor	r24, r24
 a22:	b8 5f       	subi	r27, 0xF8	; 248
 a24:	39 f0       	breq	.+14     	; 0xa34 <__fixunssfsi+0x46>
 a26:	b9 3f       	cpi	r27, 0xF9	; 249
 a28:	cc f3       	brlt	.-14     	; 0xa1c <__fixunssfsi+0x2e>
 a2a:	86 95       	lsr	r24
 a2c:	77 95       	ror	r23
 a2e:	67 95       	ror	r22
 a30:	b3 95       	inc	r27
 a32:	d9 f7       	brne	.-10     	; 0xa2a <__fixunssfsi+0x3c>
 a34:	3e f4       	brtc	.+14     	; 0xa44 <__fixunssfsi+0x56>
 a36:	90 95       	com	r25
 a38:	80 95       	com	r24
 a3a:	70 95       	com	r23
 a3c:	61 95       	neg	r22
 a3e:	7f 4f       	sbci	r23, 0xFF	; 255
 a40:	8f 4f       	sbci	r24, 0xFF	; 255
 a42:	9f 4f       	sbci	r25, 0xFF	; 255
 a44:	08 95       	ret

00000a46 <__floatunsisf>:
 a46:	e8 94       	clt
 a48:	09 c0       	rjmp	.+18     	; 0xa5c <__floatsisf+0x12>

00000a4a <__floatsisf>:
 a4a:	97 fb       	bst	r25, 7
 a4c:	3e f4       	brtc	.+14     	; 0xa5c <__floatsisf+0x12>
 a4e:	90 95       	com	r25
 a50:	80 95       	com	r24
 a52:	70 95       	com	r23
 a54:	61 95       	neg	r22
 a56:	7f 4f       	sbci	r23, 0xFF	; 255
 a58:	8f 4f       	sbci	r24, 0xFF	; 255
 a5a:	9f 4f       	sbci	r25, 0xFF	; 255
 a5c:	99 23       	and	r25, r25
 a5e:	a9 f0       	breq	.+42     	; 0xa8a <__floatsisf+0x40>
 a60:	f9 2f       	mov	r31, r25
 a62:	96 e9       	ldi	r25, 0x96	; 150
 a64:	bb 27       	eor	r27, r27
 a66:	93 95       	inc	r25
 a68:	f6 95       	lsr	r31
 a6a:	87 95       	ror	r24
 a6c:	77 95       	ror	r23
 a6e:	67 95       	ror	r22
 a70:	b7 95       	ror	r27
 a72:	f1 11       	cpse	r31, r1
 a74:	f8 cf       	rjmp	.-16     	; 0xa66 <__floatsisf+0x1c>
 a76:	fa f4       	brpl	.+62     	; 0xab6 <__floatsisf+0x6c>
 a78:	bb 0f       	add	r27, r27
 a7a:	11 f4       	brne	.+4      	; 0xa80 <__floatsisf+0x36>
 a7c:	60 ff       	sbrs	r22, 0
 a7e:	1b c0       	rjmp	.+54     	; 0xab6 <__floatsisf+0x6c>
 a80:	6f 5f       	subi	r22, 0xFF	; 255
 a82:	7f 4f       	sbci	r23, 0xFF	; 255
 a84:	8f 4f       	sbci	r24, 0xFF	; 255
 a86:	9f 4f       	sbci	r25, 0xFF	; 255
 a88:	16 c0       	rjmp	.+44     	; 0xab6 <__floatsisf+0x6c>
 a8a:	88 23       	and	r24, r24
 a8c:	11 f0       	breq	.+4      	; 0xa92 <__floatsisf+0x48>
 a8e:	96 e9       	ldi	r25, 0x96	; 150
 a90:	11 c0       	rjmp	.+34     	; 0xab4 <__floatsisf+0x6a>
 a92:	77 23       	and	r23, r23
 a94:	21 f0       	breq	.+8      	; 0xa9e <__floatsisf+0x54>
 a96:	9e e8       	ldi	r25, 0x8E	; 142
 a98:	87 2f       	mov	r24, r23
 a9a:	76 2f       	mov	r23, r22
 a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <__floatsisf+0x5e>
 a9e:	66 23       	and	r22, r22
 aa0:	71 f0       	breq	.+28     	; 0xabe <__floatsisf+0x74>
 aa2:	96 e8       	ldi	r25, 0x86	; 134
 aa4:	86 2f       	mov	r24, r22
 aa6:	70 e0       	ldi	r23, 0x00	; 0
 aa8:	60 e0       	ldi	r22, 0x00	; 0
 aaa:	2a f0       	brmi	.+10     	; 0xab6 <__floatsisf+0x6c>
 aac:	9a 95       	dec	r25
 aae:	66 0f       	add	r22, r22
 ab0:	77 1f       	adc	r23, r23
 ab2:	88 1f       	adc	r24, r24
 ab4:	da f7       	brpl	.-10     	; 0xaac <__floatsisf+0x62>
 ab6:	88 0f       	add	r24, r24
 ab8:	96 95       	lsr	r25
 aba:	87 95       	ror	r24
 abc:	97 f9       	bld	r25, 7
 abe:	08 95       	ret

00000ac0 <__fp_inf>:
 ac0:	97 f9       	bld	r25, 7
 ac2:	9f 67       	ori	r25, 0x7F	; 127
 ac4:	80 e8       	ldi	r24, 0x80	; 128
 ac6:	70 e0       	ldi	r23, 0x00	; 0
 ac8:	60 e0       	ldi	r22, 0x00	; 0
 aca:	08 95       	ret

00000acc <__fp_nan>:
 acc:	9f ef       	ldi	r25, 0xFF	; 255
 ace:	80 ec       	ldi	r24, 0xC0	; 192
 ad0:	08 95       	ret

00000ad2 <__fp_pscA>:
 ad2:	00 24       	eor	r0, r0
 ad4:	0a 94       	dec	r0
 ad6:	16 16       	cp	r1, r22
 ad8:	17 06       	cpc	r1, r23
 ada:	18 06       	cpc	r1, r24
 adc:	09 06       	cpc	r0, r25
 ade:	08 95       	ret

00000ae0 <__fp_pscB>:
 ae0:	00 24       	eor	r0, r0
 ae2:	0a 94       	dec	r0
 ae4:	12 16       	cp	r1, r18
 ae6:	13 06       	cpc	r1, r19
 ae8:	14 06       	cpc	r1, r20
 aea:	05 06       	cpc	r0, r21
 aec:	08 95       	ret

00000aee <__fp_round>:
 aee:	09 2e       	mov	r0, r25
 af0:	03 94       	inc	r0
 af2:	00 0c       	add	r0, r0
 af4:	11 f4       	brne	.+4      	; 0xafa <__fp_round+0xc>
 af6:	88 23       	and	r24, r24
 af8:	52 f0       	brmi	.+20     	; 0xb0e <__fp_round+0x20>
 afa:	bb 0f       	add	r27, r27
 afc:	40 f4       	brcc	.+16     	; 0xb0e <__fp_round+0x20>
 afe:	bf 2b       	or	r27, r31
 b00:	11 f4       	brne	.+4      	; 0xb06 <__fp_round+0x18>
 b02:	60 ff       	sbrs	r22, 0
 b04:	04 c0       	rjmp	.+8      	; 0xb0e <__fp_round+0x20>
 b06:	6f 5f       	subi	r22, 0xFF	; 255
 b08:	7f 4f       	sbci	r23, 0xFF	; 255
 b0a:	8f 4f       	sbci	r24, 0xFF	; 255
 b0c:	9f 4f       	sbci	r25, 0xFF	; 255
 b0e:	08 95       	ret

00000b10 <__fp_split3>:
 b10:	57 fd       	sbrc	r21, 7
 b12:	90 58       	subi	r25, 0x80	; 128
 b14:	44 0f       	add	r20, r20
 b16:	55 1f       	adc	r21, r21
 b18:	59 f0       	breq	.+22     	; 0xb30 <__fp_splitA+0x10>
 b1a:	5f 3f       	cpi	r21, 0xFF	; 255
 b1c:	71 f0       	breq	.+28     	; 0xb3a <__fp_splitA+0x1a>
 b1e:	47 95       	ror	r20

00000b20 <__fp_splitA>:
 b20:	88 0f       	add	r24, r24
 b22:	97 fb       	bst	r25, 7
 b24:	99 1f       	adc	r25, r25
 b26:	61 f0       	breq	.+24     	; 0xb40 <__fp_splitA+0x20>
 b28:	9f 3f       	cpi	r25, 0xFF	; 255
 b2a:	79 f0       	breq	.+30     	; 0xb4a <__fp_splitA+0x2a>
 b2c:	87 95       	ror	r24
 b2e:	08 95       	ret
 b30:	12 16       	cp	r1, r18
 b32:	13 06       	cpc	r1, r19
 b34:	14 06       	cpc	r1, r20
 b36:	55 1f       	adc	r21, r21
 b38:	f2 cf       	rjmp	.-28     	; 0xb1e <__fp_split3+0xe>
 b3a:	46 95       	lsr	r20
 b3c:	f1 df       	rcall	.-30     	; 0xb20 <__fp_splitA>
 b3e:	08 c0       	rjmp	.+16     	; 0xb50 <__fp_splitA+0x30>
 b40:	16 16       	cp	r1, r22
 b42:	17 06       	cpc	r1, r23
 b44:	18 06       	cpc	r1, r24
 b46:	99 1f       	adc	r25, r25
 b48:	f1 cf       	rjmp	.-30     	; 0xb2c <__fp_splitA+0xc>
 b4a:	86 95       	lsr	r24
 b4c:	71 05       	cpc	r23, r1
 b4e:	61 05       	cpc	r22, r1
 b50:	08 94       	sec
 b52:	08 95       	ret

00000b54 <__fp_zero>:
 b54:	e8 94       	clt

00000b56 <__fp_szero>:
 b56:	bb 27       	eor	r27, r27
 b58:	66 27       	eor	r22, r22
 b5a:	77 27       	eor	r23, r23
 b5c:	cb 01       	movw	r24, r22
 b5e:	97 f9       	bld	r25, 7
 b60:	08 95       	ret

00000b62 <__mulsf3>:
 b62:	0b d0       	rcall	.+22     	; 0xb7a <__mulsf3x>
 b64:	c4 cf       	rjmp	.-120    	; 0xaee <__fp_round>
 b66:	b5 df       	rcall	.-150    	; 0xad2 <__fp_pscA>
 b68:	28 f0       	brcs	.+10     	; 0xb74 <__mulsf3+0x12>
 b6a:	ba df       	rcall	.-140    	; 0xae0 <__fp_pscB>
 b6c:	18 f0       	brcs	.+6      	; 0xb74 <__mulsf3+0x12>
 b6e:	95 23       	and	r25, r21
 b70:	09 f0       	breq	.+2      	; 0xb74 <__mulsf3+0x12>
 b72:	a6 cf       	rjmp	.-180    	; 0xac0 <__fp_inf>
 b74:	ab cf       	rjmp	.-170    	; 0xacc <__fp_nan>
 b76:	11 24       	eor	r1, r1
 b78:	ee cf       	rjmp	.-36     	; 0xb56 <__fp_szero>

00000b7a <__mulsf3x>:
 b7a:	ca df       	rcall	.-108    	; 0xb10 <__fp_split3>
 b7c:	a0 f3       	brcs	.-24     	; 0xb66 <__mulsf3+0x4>

00000b7e <__mulsf3_pse>:
 b7e:	95 9f       	mul	r25, r21
 b80:	d1 f3       	breq	.-12     	; 0xb76 <__mulsf3+0x14>
 b82:	95 0f       	add	r25, r21
 b84:	50 e0       	ldi	r21, 0x00	; 0
 b86:	55 1f       	adc	r21, r21
 b88:	62 9f       	mul	r22, r18
 b8a:	f0 01       	movw	r30, r0
 b8c:	72 9f       	mul	r23, r18
 b8e:	bb 27       	eor	r27, r27
 b90:	f0 0d       	add	r31, r0
 b92:	b1 1d       	adc	r27, r1
 b94:	63 9f       	mul	r22, r19
 b96:	aa 27       	eor	r26, r26
 b98:	f0 0d       	add	r31, r0
 b9a:	b1 1d       	adc	r27, r1
 b9c:	aa 1f       	adc	r26, r26
 b9e:	64 9f       	mul	r22, r20
 ba0:	66 27       	eor	r22, r22
 ba2:	b0 0d       	add	r27, r0
 ba4:	a1 1d       	adc	r26, r1
 ba6:	66 1f       	adc	r22, r22
 ba8:	82 9f       	mul	r24, r18
 baa:	22 27       	eor	r18, r18
 bac:	b0 0d       	add	r27, r0
 bae:	a1 1d       	adc	r26, r1
 bb0:	62 1f       	adc	r22, r18
 bb2:	73 9f       	mul	r23, r19
 bb4:	b0 0d       	add	r27, r0
 bb6:	a1 1d       	adc	r26, r1
 bb8:	62 1f       	adc	r22, r18
 bba:	83 9f       	mul	r24, r19
 bbc:	a0 0d       	add	r26, r0
 bbe:	61 1d       	adc	r22, r1
 bc0:	22 1f       	adc	r18, r18
 bc2:	74 9f       	mul	r23, r20
 bc4:	33 27       	eor	r19, r19
 bc6:	a0 0d       	add	r26, r0
 bc8:	61 1d       	adc	r22, r1
 bca:	23 1f       	adc	r18, r19
 bcc:	84 9f       	mul	r24, r20
 bce:	60 0d       	add	r22, r0
 bd0:	21 1d       	adc	r18, r1
 bd2:	82 2f       	mov	r24, r18
 bd4:	76 2f       	mov	r23, r22
 bd6:	6a 2f       	mov	r22, r26
 bd8:	11 24       	eor	r1, r1
 bda:	9f 57       	subi	r25, 0x7F	; 127
 bdc:	50 40       	sbci	r21, 0x00	; 0
 bde:	8a f0       	brmi	.+34     	; 0xc02 <__mulsf3_pse+0x84>
 be0:	e1 f0       	breq	.+56     	; 0xc1a <__mulsf3_pse+0x9c>
 be2:	88 23       	and	r24, r24
 be4:	4a f0       	brmi	.+18     	; 0xbf8 <__mulsf3_pse+0x7a>
 be6:	ee 0f       	add	r30, r30
 be8:	ff 1f       	adc	r31, r31
 bea:	bb 1f       	adc	r27, r27
 bec:	66 1f       	adc	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	91 50       	subi	r25, 0x01	; 1
 bf4:	50 40       	sbci	r21, 0x00	; 0
 bf6:	a9 f7       	brne	.-22     	; 0xbe2 <__mulsf3_pse+0x64>
 bf8:	9e 3f       	cpi	r25, 0xFE	; 254
 bfa:	51 05       	cpc	r21, r1
 bfc:	70 f0       	brcs	.+28     	; 0xc1a <__mulsf3_pse+0x9c>
 bfe:	60 cf       	rjmp	.-320    	; 0xac0 <__fp_inf>
 c00:	aa cf       	rjmp	.-172    	; 0xb56 <__fp_szero>
 c02:	5f 3f       	cpi	r21, 0xFF	; 255
 c04:	ec f3       	brlt	.-6      	; 0xc00 <__mulsf3_pse+0x82>
 c06:	98 3e       	cpi	r25, 0xE8	; 232
 c08:	dc f3       	brlt	.-10     	; 0xc00 <__mulsf3_pse+0x82>
 c0a:	86 95       	lsr	r24
 c0c:	77 95       	ror	r23
 c0e:	67 95       	ror	r22
 c10:	b7 95       	ror	r27
 c12:	f7 95       	ror	r31
 c14:	e7 95       	ror	r30
 c16:	9f 5f       	subi	r25, 0xFF	; 255
 c18:	c1 f7       	brne	.-16     	; 0xc0a <__mulsf3_pse+0x8c>
 c1a:	fe 2b       	or	r31, r30
 c1c:	88 0f       	add	r24, r24
 c1e:	91 1d       	adc	r25, r1
 c20:	96 95       	lsr	r25
 c22:	87 95       	ror	r24
 c24:	97 f9       	bld	r25, 7
 c26:	08 95       	ret

00000c28 <__divmodhi4>:
 c28:	97 fb       	bst	r25, 7
 c2a:	07 2e       	mov	r0, r23
 c2c:	16 f4       	brtc	.+4      	; 0xc32 <__divmodhi4+0xa>
 c2e:	00 94       	com	r0
 c30:	06 d0       	rcall	.+12     	; 0xc3e <__divmodhi4_neg1>
 c32:	77 fd       	sbrc	r23, 7
 c34:	08 d0       	rcall	.+16     	; 0xc46 <__divmodhi4_neg2>
 c36:	0b d0       	rcall	.+22     	; 0xc4e <__udivmodhi4>
 c38:	07 fc       	sbrc	r0, 7
 c3a:	05 d0       	rcall	.+10     	; 0xc46 <__divmodhi4_neg2>
 c3c:	3e f4       	brtc	.+14     	; 0xc4c <__divmodhi4_exit>

00000c3e <__divmodhi4_neg1>:
 c3e:	90 95       	com	r25
 c40:	81 95       	neg	r24
 c42:	9f 4f       	sbci	r25, 0xFF	; 255
 c44:	08 95       	ret

00000c46 <__divmodhi4_neg2>:
 c46:	70 95       	com	r23
 c48:	61 95       	neg	r22
 c4a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c4c <__divmodhi4_exit>:
 c4c:	08 95       	ret

00000c4e <__udivmodhi4>:
 c4e:	aa 1b       	sub	r26, r26
 c50:	bb 1b       	sub	r27, r27
 c52:	51 e1       	ldi	r21, 0x11	; 17
 c54:	07 c0       	rjmp	.+14     	; 0xc64 <__udivmodhi4_ep>

00000c56 <__udivmodhi4_loop>:
 c56:	aa 1f       	adc	r26, r26
 c58:	bb 1f       	adc	r27, r27
 c5a:	a6 17       	cp	r26, r22
 c5c:	b7 07       	cpc	r27, r23
 c5e:	10 f0       	brcs	.+4      	; 0xc64 <__udivmodhi4_ep>
 c60:	a6 1b       	sub	r26, r22
 c62:	b7 0b       	sbc	r27, r23

00000c64 <__udivmodhi4_ep>:
 c64:	88 1f       	adc	r24, r24
 c66:	99 1f       	adc	r25, r25
 c68:	5a 95       	dec	r21
 c6a:	a9 f7       	brne	.-22     	; 0xc56 <__udivmodhi4_loop>
 c6c:	80 95       	com	r24
 c6e:	90 95       	com	r25
 c70:	bc 01       	movw	r22, r24
 c72:	cd 01       	movw	r24, r26
 c74:	08 95       	ret

00000c76 <_exit>:
 c76:	f8 94       	cli

00000c78 <__stop_program>:
 c78:	ff cf       	rjmp	.-2      	; 0xc78 <__stop_program>
